// import { usePluginData } from '@docusaurus/core';
// import { parseMarkdownString } from '@docusaurus/utils';

import {aliasedSitePathToRelativePath, resolveMarkdownLinkPathname} from '@docusaurus/utils';
import fs from 'fs-extra';
import path from 'path';

// Do not report this routes as unresolved
// http*, /tags/*, "#" and / ignored by default
const ignoreRoutes = new Set([
	'/about',
	'about',
])

module.exports = function (context) {
	return {
		name: 'docusaurus-backlinks-plugin',

		// https://docusaurus.io/docs/api/plugin-methods/lifecycle-apis#postBuild
		async postBuild(props) {
			// console.log("[backlinks-plugin] postBuild hook", props) // –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ (—Ä–æ—É—Ç—ã, –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ .md, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤, siteDir, siteConfig –∏ —Ç.–¥.). –î–µ–º–æ: https://file.def.pm/rlGTzVv6.jpg
			const {plugins, outDir} = props
			// console.log("[backlinks-plugin] postBuild hook, plugins", plugins)

			const blogPlugin = plugins.find(plugin => plugin.name === 'docusaurus-plugin-content-blog')
			const docsPlugin = plugins.find(plugin => plugin.name === 'docusaurus-plugin-content-docs')

			const blogPosts = blogPlugin?.content?.blogPosts || []
			const docItems = docsPlugin?.content?.loadedVersions[0]?.docs || []

			const allContent = [
				...blogPosts.map(post => ({
					content: post.content,
					metadata: post.metadata
				})),
				...docItems.map(doc => ({
					// #todo –±—ã—Å—Ç—Ä—ã–π —Ñ–∏–∫—Å. –ü–æ—á–µ–º—É –≤ docs –Ω–µ—Ç content?
					content: fs.readFileSync(aliasedSitePathToRelativePath(doc.source), 'utf8'),
					metadata: {
						source: doc.source,
						permalink: doc.permalink,
						description: doc.description
					}
				}))
			]

			// –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å source -> permalink
			const sourceToPermalinkDict = {}
			for (const {metadata} of allContent) {
				sourceToPermalinkDict[metadata.source] = metadata.permalink
			}

			// –ö–æ—Å—Ç—ã–ª—å, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å Unresolved —Å—Å—ã–ª–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è —Å /docs –Ω–∞ —Å—Å—ã–ª–∫–∏ –±–ª–æ–≥–∞ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
			// –í docusaurus –ù–ï–¢ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞ –º–µ–∂–¥—É –±–ª–æ–≥–∞–º–∏ –∏ –¥–æ–∫–∞–º–∏. –ò –¥–∞, —è —Ö–æ—Ä–æ—à–æ –∏—Å–∫–∞–ª. –û–Ω–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö.
			const registeredRoutes = new Set()
			for (const {metadata} of allContent) {
				registeredRoutes.add(metadata.permalink)
			}

			const resolverContext = {
				siteDir: ".", // try siteConfig.url == "https://example.com" ?
				// sourceFilePath: 'override me', // –≠—Ç–æ —Ñ–∞–π–ª, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Ä–µ—Å–æ–ª–≤–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞.
				contentPaths: {
					contentPath: 'blog',
					contentPathLocalized: 'docs', // –±–µ–∑ —ç—Ç–æ–≥–æ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–µ—Å–æ–ª–≤—è—Ç—Å—è –∏ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –∏–∑-–∑–∞ undefined –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ getContentPathList
				},
				sourceToPermalink: new Map(
					Object.entries(sourceToPermalinkDict)
				),
			}

			const backlinks_map = {}
			for (const {content, metadata} of allContent) {
				// console.log("[backlinks-plugin] postBuild, üìÅ", metadata.source)
				if (!content) {
					console.error("[backlinks-plugin] postBuild, content is undefined", metadata.source)
					throw new Error("Content is undefined")
				}

				const links = content.match(/(?<!!)\[([^\]]*)\]\(([^)]+)\)/g) || [];
				// console.log("[backlinks-plugin] postBuild, üîó", links)

				for (const link_markup of links) {
					const [_, title, url] = link_markup.match(/(?<!!)\[([^\]]*)\]\(([^)]+)\)/)
					// console.log("[backlinks-plugin] postBuild hook, url, title", url, title)

					// –§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ .replace('@site/', ''),
					// —Ç–∞–∫ –∫–∞–∫ –∏–Ω–ø—É—Ç—ã —Ç–∞–∫–∏–µ: @site/blog/2015-03-06-sozdanie-poddomena-ispmanager.md
					resolverContext.sourceFilePath = aliasedSitePathToRelativePath(metadata.source)
					const resolvedUrl = resolveMarkdownLinkPathname(url, resolverContext) || (registeredRoutes.has(url) ? url : null)
					// console.log("[backlinks-plugin] postBuild hook, resolvedUrl", resolvedUrl)

					if (resolvedUrl) {
						if (!backlinks_map[resolvedUrl]) backlinks_map[resolvedUrl] = {}
						backlinks_map[resolvedUrl][metadata.permalink] = metadata.description || ''

					// #todo fix hardcoded shit
					} else if (!(url.startsWith('http') || ignoreRoutes.has(url) || url == '#' || url == '/' || url.startsWith('/tags/'))) {
						console.warn("ü§î [backlinks-plugin] postBuild hook, NOT resolved Url", url, " in ", metadata.source)
					}
				}
			}
			// console.log("[backlinks-plugin] backlinks_map:", backlinks_map)

			const backlinksPath = path.join(outDir, 'backlinks.json');
			try {
				await fs.outputFile(backlinksPath, JSON.stringify(backlinks_map, null, 2));
			} catch (err) {
				console.error("[backlinks-plugin] postBuild hook, error writing backlinks.json", err)
				throw err
			}
		}
	};
};

