// import { usePluginData } from '@docusaurus/core';
// import { parseMarkdownString } from '@docusaurus/utils';

import {aliasedSitePathToRelativePath, resolveMarkdownLinkPathname} from '@docusaurus/utils';
import fs from 'fs-extra';
import path from 'path';

module.exports = function (context) {
	return {
		name: 'docusaurus-backlinks-plugin',

		// https://docusaurus.io/docs/api/plugin-methods/lifecycle-apis#postBuild
		async postBuild(props) {
			// console.log("[backlinks-plugin] postBuild hook", props) // –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ (—Ä–æ—É—Ç—ã, –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ .md, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤, siteDir, siteConfig –∏ —Ç.–¥.). –î–µ–º–æ: https://file.def.pm/rlGTzVv6.jpg
			const {plugins, outDir} = props
			// console.log("[backlinks-plugin] postBuild hook, plugins", plugins)

			const blogPlugin = plugins.find(plugin => plugin.name === 'docusaurus-plugin-content-blog')
			const blogPosts  = blogPlugin.content.blogPosts
			// console.log("[backlinks-plugin] postBuild hook, blogPosts", blogPosts)
			// console.log("[backlinks-plugin] postBuild hook, blogPosts üëÜ")

			const sourceToPermalinkDict = {}
			for (const {metadata} of blogPosts) {
				sourceToPermalinkDict[metadata.source] = metadata.permalink
			}

			const resolverContext = {
				siteDir: ".", // try siteConfig.url == "https://example.com" ?
				// sourceFilePath: 'override me', // –≠—Ç–æ —Ñ–∞–π–ª, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Ä–µ—Å–æ–ª–≤–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞.
				contentPaths: {
					contentPath: 'blog',
					contentPathLocalized: 'blablabla', // –±–µ–∑ —ç—Ç–æ–≥–æ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–µ—Å–æ–ª–≤—è—Ç—Å—è –∏ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –∏–∑-–∑–∞ undefined –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ getContentPathList
				},
				sourceToPermalink: new Map(
					Object.entries(sourceToPermalinkDict)
				),
			}

			const backlinks_map = {}
			for (const {content, metadata} of blogPosts) {
				const links = content.match(/(?<!!)\[([^\]]*)\]\(([^)]+)\)/g) || [];
				// console.log("[backlinks-plugin] postBuild hook, links", links)

				for (const link_markup of links) {
					const [_, title, url] = link_markup.match(/(?<!!)\[([^\]]*)\]\(([^)]+)\)/)
					// console.log("[backlinks-plugin] postBuild hook, url, title", url, title)

					// –§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ .replace('@site/', ''),
					// —Ç–∞–∫ –∫–∞–∫ –∏–Ω–ø—É—Ç—ã —Ç–∞–∫–∏–µ: @site/blog/2015-03-06-sozdanie-poddomena-ispmanager.md
					resolverContext.sourceFilePath = aliasedSitePathToRelativePath(metadata.source)
					const resolvedUrl = resolveMarkdownLinkPathname(url, resolverContext)
					// console.log("[backlinks-plugin] postBuild hook, resolvedUrl", resolvedUrl)

					if (resolvedUrl) {
						if (!backlinks_map[resolvedUrl]) {
							backlinks_map[resolvedUrl] = {}
						}

						backlinks_map[resolvedUrl][metadata.permalink] = metadata.description || ''
					}
					// else if (!url.startsWith('http')) { // tags, tg://, pages, /, –≤—Ä–µ–º–µ–Ω–Ω–æ /docs (–Ω–µ—Ç –≤ –∏–Ω–¥–µ–∫—Å–µ) –∏ —Ç–∞–∫–∏ –ø–∞—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π
					// 	console.log("ü§î [backlinks-plugin] postBuild hook, NOT resolved Url", url, " in ", metadata.source)
					// }
				}
			}
			// console.log("[backlinks-plugin] backlinks_map:", backlinks_map)

			const backlinksPath = path.join(outDir, 'backlinks.json');
			await fs.outputFile(backlinksPath, JSON.stringify(backlinks_map, null, 2));
		}
	};
};
